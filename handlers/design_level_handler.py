import asyncio
import random

from aiogram import Router, Bot, types, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.data_base import Users
from data.keyboards import start_keyboard
from settings import design_questions, InputMessage, user_levels, options, stickers, start_photo_id, \
    design_level_photo_id, level_photos, design_level_video_note2, mentor_video_note
from utils.is_subscriber import is_subscriber

design_level_router = Router()


@design_level_router.message(F.video_note, any_state)
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    print(message.video_note.file_id)

@design_level_router.message(F.photo, any_state)
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    print(message.photo[-1].file_id)


@design_level_router.message(Text(text="/start"), any_state)
@is_subscriber
async def start(message: types.Message, state: FSMContext, bot: Bot):
    next_message = await message.answer_photo(start_photo_id, "–í—ã–±–∏—Ä–∞–π, —á–µ–≥–æ –∂–µ–ª–∞–µ—à—å: —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü –ø–æ —Ä—ã–Ω–∫—É, –∫—Ä—É—Ç–∞–Ω—É—Ç—å"
                                                                      " —Ä—É–ª–µ—Ç–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–≤"
                                                                      " –≤ –¥–∏–∑–∞–π–Ω–µ, –∑–∞–±—Ä–∞—Ç—å —Å–∞–º—É—é –±–æ–ª—å—à—É—é –±–∞–∑—É –ø–æ –¥–∏–∑–∞–π–Ω—É"
                                                                      " –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–ø–æ–≤–æ–π"
                                                                      " –∫–æ–º–ø–∞–Ω–∏–∏!")
    await next_message.edit_reply_markup(reply_markup=start_keyboard(next_message.message_id).as_markup())
    await state.clear()


@design_level_router.callback_query(Text(startswith="start_design_level|"), any_state)
@is_subscriber
async def user_send_link(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    delete_message_id = int(message.data.split("|")[1])
    keyboard = InlineKeyboardBuilder()
    user = Users(message.from_user.id, "design_level")
    await user.read_data()
    await user.add_user()
    question = design_questions.get('1 –≤–æ–ø—Ä–æ—Å')
    for i, answer in enumerate(question.get("answers").keys()):
        keyboard.row(
            InlineKeyboardButton(text=options[i], callback_data=f"answer|{question.get('answers').get(answer)}|"
                                                                f"{1}"))
    answers = list(question.get("answers").keys())
    random.shuffle(answers)
    for i in range(len(answers)):
        answers[i] = f"{stickers[i]} {answers[i]}"
    text = (f"{1}." 
            f" {question.get('content')}") + "\n    " + "\n    ".join(answers)
    await message.message.answer_photo(caption="–°—Ç–∞—Ä—Ç—É–µ–º —Ç–µ—Å—Ç <b>¬´–ö—Ç–æ —Ç—ã –ø–æ –¥–∏–∑–∞–π–Ω—É?¬ª</b>! –¢–µ–±—è –∂–¥—É—Ç –¥–µ—Å—è—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç, –∫—Ç–æ –¢–´ –∏–∑ –ª—ã—Å—ã—Ö –∫–æ—Ç–æ–≤",
                                       photo=design_level_photo_id)
    await asyncio.sleep(2)
    await message.message.answer(text=text, reply_markup=keyboard.as_markup())
    await state.set_state(InputMessage.design_level)
    await state.update_data(last_question=1)


@design_level_router.callback_query(Text(startswith="answer|"), InputMessage.design_level)
@is_subscriber
async def user_send_link(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = call.data.split("|")[1:]
    last_answer, last_question = int(data[0]), int(data[1])
    points = await state.get_data()
    if points.get("last_question") is None or (int(points.get("last_question")) != last_question):
        return
    points[str(last_question)] = last_answer
    points["last_question"] = last_question + 1
    await state.update_data(points)
    if last_question == 10:
        user = Users(call.from_user.id, "design_level")
        await user.read_data()
        await user.edit_completion()
        final_points = sum(points.values()) - int(points.get("last_question"))
        level = ""
        level_photo = ""
        for key in user_levels.keys():
            if user_levels.get(key)[0] <= final_points <= user_levels.get(key)[1]:
                level = key
                level_photo = level_photos.get(key)
                break
        delete_message = await call.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ—Å—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!   –Ø –≤–∏–∂—É —Ç–≤–æ–∏–º –≥—Ä–µ–π–¥–æ–º...")
        await asyncio.sleep(2)
        await delete_message.delete()
        await call.message.answer_photo(caption=f"–ó–∞–≥—Ä—É–∑–æ—á–∫–∞ –ø—Ä–æ—à–ª–∞, —Ç–≤–æ–π –≥—Ä–µ–π–¥ -> ({level})",
                                        photo=level_photo)
        await call.message.answer_video_note(video_note=mentor_video_note)
        await asyncio.sleep(5)
        link = '<a href="https://t.me/slashstudy">–°–ª–µ—à</a>'
        await call.message.answer(f"–°–æ—Ä—Ä–∏ –∑–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–π –∫—Ä—É–∂–æ–∫, –Ω–æ —è –Ω–µ –º–æ–≥—É –º–æ–ª—á–∞—Ç—å)\n\n{link} - —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç –≤ –¥–∏–∑–∞–π–Ω–µ. –ú–µ–Ω—Ç–æ—Ä, –∑–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∫—Ä—É—á–µ.")
        await asyncio.sleep(1.5)
        await call.message.answer("–ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞–¥–æ–ª–±–∞—Ç—å –ø—É—à–∞–º–∏ –∏ —Å—É—Ö–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏, –∞ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥: –±—ã—Ç—å —Ä—è–¥–æ–º, –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –¥–æ—Ä–æ–≥–∏")
        await asyncio.sleep(2)
        await call.message.answer('–°–µ–Ω—å–æ—Ä –∏ –ª–∏–¥ –¥–∏–∑–∞–π–Ω–µ—Ä—ã –∏–∑ Ozon, Yandex, –°–ë–ï–†, –ú–¢–° –∏ –¥—Ä—É–≥–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –∫–æ–ø–Ω—É—Ç –≤ —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã/—Ö–æ—Ç–µ–ª–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤—è—Ç –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –Ω–æ—É—à–µ–Ω–µ. –ü–æ —Ö–æ–¥—É –ø—É—Ç–∏ –≤—Å–µ –≤—Ä–µ–º—è –±—É–¥—É—Ç —Å —Ç–æ–±–æ–π –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ª—é–±—ã–µ  –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—è –æ—Ç "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ —Ñ–∏–≥–º–µ" –∑–∞–∫–∞–Ω—á–∏–≤–∞—è "–ö–∞–∫ –∑–∞–±—Ä–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä —Å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π"')
        await asyncio.sleep(2)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üéÅ –ù–∞–π—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∞", url="https://slashstudy.ru"))
        await call.message.answer("–Ø —Å—á–∏—Ç–∞—é, –±—É–¥–µ—Ç —á–µ—Å—Ç–Ω–æ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á—É - 30% –¥–æ –Ω–∞—á–∞–ª–∞ –ª–µ—Ç–∞. –ó–∞–ª–µ—Ç–∞–π –Ω–∞ —Å–∞–π—Ç, –æ–Ω–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è)",
                                  reply_markup=keyboard.as_markup())
        await state.clear()
        return
    elif last_question == 5:
        await call.message.delete()
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üéÅ –ù–∞–π—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∞", url="https://slashstudy.ru"))
        await call.message.answer(text=f"–ü–æ–ª–æ–≤–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∑–∞–¥–∏, –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å —á—É—Ç—å. –ú—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª—É—á—à–µ –∏ –ø—Ä–∏–¥—É–º–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –∫–ª–∞—Å—Å–Ω–æ —Ä–µ—à–µ–Ω–∏–µ.\n\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ–∏ —Å–∫–∏–ª–ª—ã –≤ –°–ª–µ—à –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –∏–∑ Ozon, Yandex, –°–±–µ—Ä –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π, –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–±–∏—Ä–∞–π –∑–≤–æ–Ω–æ–∫ —Å —Ç–æ–ø–æ–º –ø–æ —Å–∫–∏–¥–∫–µ 25% –¥–æ 20 –∞–ø—Ä–µ–ª—è", reply_markup=keyboard.as_markup())
        await asyncio.sleep(2)
        next_keyboard = InlineKeyboardBuilder()
        next_keyboard.row(InlineKeyboardButton(text="–ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ", callback_data="next_six_question"))
        await bot.send_video_note(chat_id=call.from_user.id, video_note=design_level_video_note2, reply_markup=next_keyboard.as_markup())
        return
    keyboard = InlineKeyboardBuilder()
    question = design_questions.get(f'{last_question + 1} –≤–æ–ø—Ä–æ—Å')
    answers = list(question.get("answers").keys())
    random.shuffle(answers)
    for i, answer in enumerate(answers):
        keyboard.row(
            InlineKeyboardButton(text=options[i], callback_data=f"answer|{question.get('answers').get(answer)}|"
                                                                f"{last_question + 1}"))
    for i in range(len(answers)):
        answers[i] = f"{stickers[i]} {answers[i]}"
    text = (f"{last_question + 1}."
            f" {question.get('content')}") + "\n    " + "\n    ".join(answers)
    await call.message.edit_text(text=text)
    await call.message.edit_reply_markup(reply_markup=keyboard.as_markup())


@design_level_router.callback_query(Text(text="next_six_question"), InputMessage.design_level)
@is_subscriber
async def user_send_link(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_reply_markup()
    keyboard = InlineKeyboardBuilder()
    last_question = 5
    question = design_questions.get(f'{last_question + 1} –≤–æ–ø—Ä–æ—Å')
    answers = list(question.get("answers").keys())
    random.shuffle(answers)
    for i, answer in enumerate(answers):
        keyboard.row(
            InlineKeyboardButton(text=options[i], callback_data=f"answer|{question.get('answers').get(answer)}|"
                                                                f"{last_question + 1}"))
    for i in range(len(answers)):
        answers[i] = f"{stickers[i]} {answers[i]}"
    text = (f"{last_question + 1}."
            f" {question.get('content')}") + "\n    " + "\n    ".join(answers)
    await call.message.answer(text=text, reply_markup=keyboard.as_markup())