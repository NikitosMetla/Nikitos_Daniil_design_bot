import random

from aiogram import Router, Bot, types, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.data_base import Users
from data.keyboards import start_keyboard
from settings import design_questions, InputMessage, user_levels, options, stickers, start_photo_id, \
    design_level_photo_id, design_level_video_note1, level_photos, design_level_video_note2
from utils.is_subscriber import is_subscriber

design_level_router = Router()


@design_level_router.message(F.video_note, any_state)
async def admin_cancel(message: types.Message, state: FSMContext, bot: Bot):
    print(message.video_note.file_id)


@design_level_router.message(Text(text="/start"), any_state)
@is_subscriber
async def start(message: types.Message, state: FSMContext, bot: Bot):
    next_message = await message.answer_photo(start_photo_id, "–í—ã–±–∏—Ä–∞–π, —á–µ–≥–æ –∂–µ–ª–∞–µ—à—å: —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü –ø–æ —Ä—ã–Ω–∫—É, –∫—Ä—É—Ç–∞–Ω—É—Ç—å"
                                                                      " —Ä—É–ª–µ—Ç–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–≤"
                                                                      " –≤ –¥–∏–∑–∞–π–Ω–µ, –∑–∞–±—Ä–∞—Ç—å —Å–∞–º—É—é –±–æ–ª—å—à—É—é –±–∞–∑—É –ø–æ –¥–∏–∑–∞–π–Ω—É"
                                                                      " –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–ø–æ–≤–æ–π"
                                                                      " –∫–æ–º–ø–∞–Ω–∏–∏!")
    await next_message.edit_reply_markup(reply_markup=start_keyboard(next_message.message_id).as_markup())
    await state.clear()


@design_level_router.callback_query(Text(startswith="start_design_level|"), any_state)
@is_subscriber
async def user_send_link(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    delete_message_id = int(message.data.split("|")[1])
    keyboard = InlineKeyboardBuilder()
    user = Users(message.from_user.id, "design_level")
    await user.read_data()
    await user.add_user()
    question = design_questions.get('1 –≤–æ–ø—Ä–æ—Å')
    for i, answer in enumerate(question.get("answers").keys()):
        keyboard.row(
            InlineKeyboardButton(text=options[i], callback_data=f"answer|{question.get('answers').get(answer)}|"
                                                                f"{1}"))
    answers = list(question.get("answers").keys())
    random.shuffle(answers)
    for i in range(len(answers)):
        answers[i] = f"{stickers[i]} {answers[i]}"
    text = (f"{1}." 
            f" {question.get('content')}") + "\n    " + "\n    ".join(answers)
    await message.message.answer_photo(caption="–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∂–µ —Ç–µ—Å—Ç ¬´–ö—Ç–æ —Ç—ã –ø–æ –¥–∏–∑–∞–π–Ω—É?¬ª! "
                                               "–û—Ç–≤–µ—Ç—å –Ω–∞ –¥–µ—Å—è—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∑–Ω–∞–π –∫—Ç–æ –¢–´ –∏–∑ –∫–æ—Ç–∏–∫–æ–≤",
                                       photo=design_level_photo_id)
    await message.message.answer(text=text, reply_markup=keyboard.as_markup())
    await state.set_state(InputMessage.design_level)
    await state.update_data(last_question=1)


@design_level_router.callback_query(Text(startswith="answer|"), InputMessage.design_level)
@is_subscriber
async def user_send_link(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = call.data.split("|")[1:]
    last_answer, last_question = int(data[0]), int(data[1])
    points = await state.get_data()
    if points.get("last_question") is None or (int(points.get("last_question")) != last_question):
        return
    points[str(last_question)] = last_answer
    points["last_question"] = last_question + 1
    await state.update_data(points)
    if last_question == 10:
        user = Users(call.from_user.id, "design_level")
        await user.read_data()
        await user.edit_completion()
        final_points = sum(points.values()) - int(points.get("last_question"))
        print(final_points)
        level = ""
        level_photo = ""
        for key in user_levels.keys():
            if user_levels.get(key)[0] <= final_points <= user_levels.get(key)[1]:
                level = key
                print(level)
                level_photo = level_photos.get(key)
                break
        url = "https://clc.to/slashstudy"
        link_text = "—Å–∞–π—Ç–µ"
        link = '<a href="{}">{}</a>'.format(url, link_text)
        await call.message.answer_photo(caption=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å. –¢—ã {level}üéäüí™.\n"
                                                f"–ï—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º"
                                                f" {link}üîö! –ü–µ—Ä–µ—Ö–æ–¥–∏ –±—ã—Å—Ç—Ä–µ–µ"
                                                f", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—Ç–æ—Ä—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ —Å–∞–º—É—é –≤–∫—É—Å–Ω—É —Ü–µ–Ω—É.",
                                        photo=level_photo)
        next_message = await call.message.answer("–í—ã–±–∏—Ä–∞–π, —á–µ–≥–æ –∂–µ–ª–∞–µ—à—å: —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –ó–ü –ø–æ —Ä—ã–Ω–∫—É, –∫—Ä—É—Ç–∞–Ω—É—Ç—å"
                                                  " —Ä—É–ª–µ—Ç–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–≤"
                                                  " –≤ –¥–∏–∑–∞–π–Ω–µ, –∑–∞–±—Ä–∞—Ç—å —Å–∞–º—É—é –±–æ–ª—å—à—É—é –±–∞–∑—É –ø–æ –¥–∏–∑–∞–π–Ω—É"
                                                  " –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–ø–æ–≤–æ–π"
                                                  " –∫–æ–º–ø–∞–Ω–∏–∏!")
        await next_message.edit_reply_markup(reply_markup=start_keyboard(next_message.message_id).as_markup())
        # await bot.send_video_note(chat_id=call.from_user.id, video_note=design_level_video_note2)
        await state.clear()
        return
    elif last_question == 5:
        await call.message.answer(text=f"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –∫—Ä—É—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ –¥–∏–∑–∞–π–Ω–µ, –Ω–æ –∫–∞–∫ –≥–æ–≤–æ—Ä—è—Ç –≤–µ–ª–∏–∫–∏–µ ‚Äì –Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ–∏ —Å–∫–∏–ª–ª—ã –≤ –°–ª–µ—à –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –∏–∑ Ozon, Yandex, –°–±–µ—Ä –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π, –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–±–∏—Ä–∞–π –∑–≤–æ–Ω–æ–∫ —Å —Ç–æ–ø–æ–º –ø–æ —Å–∫–∏–¥–∫–µ 30% –¥–æ 20 –∞–ø—Ä–µ–ª—è: slashstudy.ru")
        await bot.send_video_note(chat_id=call.from_user.id, video_note=design_level_video_note2)
    keyboard = InlineKeyboardBuilder()
    question = design_questions.get(f'{last_question + 1} –≤–æ–ø—Ä–æ—Å')
    answers = list(question.get("answers").keys())
    random.shuffle(answers)
    for i, answer in enumerate(answers):
        keyboard.row(
            InlineKeyboardButton(text=options[i], callback_data=f"answer|{question.get('answers').get(answer)}|"
                                                                f"{last_question + 1}"))
    for i in range(len(answers)):
        answers[i] = f"{stickers[i]} {answers[i]}"
    text = (f"{last_question + 1}."
            f" {question.get('content')}") + "\n    " + "\n    ".join(answers)
    await call.message.answer(text=text,
                              reply_markup=keyboard.as_markup())