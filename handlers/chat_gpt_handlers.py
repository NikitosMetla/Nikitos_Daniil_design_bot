import asyncio
import io
import random

from aiogram import Router, Bot, types, F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.data_base import Users
from settings import design_questions, InputMessage, text_rofl, text_objective
from utils.is_subscriber import is_subscriber
from utils.rating_chat_gpt import RatingChatGpt

chat_gpt_router = Router()


@chat_gpt_router.callback_query(Text(startswith="ai_recommendation|"), any_state)
@chat_gpt_router.callback_query(Text(startswith="rofl_recommendation|"), any_state)
@is_subscriber
async def user_start_objective(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    delete_message_id = int(message.data.split("|")[1])
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é", callback_data="start_menu"))
    if "rofl_recommendation|" in message.data:
        attempts = True
        if attempts:
            await message.message.answer(text_rofl,reply_markup=keyboard.as_markup())
            await state.set_state(InputMessage.rofl_ai_recommendation_state)
            await state.update_data(rofl=True)
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url="sadfasdf"))
            keyboard.row(InlineKeyboardButton(text="–í —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é", callback_data="start_menu"))
            await message.message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ù–µ–π—Ä–æ–∫—Ä–∏—Ç–∏–∫" –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç –∏–∑'
                                         ' 10 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ 250 —Ä—É–±–ª–µ–π.')
    else:
        await message.message.answer(text_objective, reply_markup=keyboard.as_markup())
        user = Users(message.from_user.id, "ai_recommendations")
        await user.read_data()
        await user.add_user()
        await state.set_state(InputMessage.objective_ai_recommendation_state)
        await state.update_data(rofl=False)
    # await users_repository.add_user(user_id=message.from_user.id, username=message.from_user.username)
    await bot.delete_message(chat_id=message.from_user.id, message_id=delete_message_id)


# @chat_gpt_router.callback_query(Text(text="pay_attempts"), any_state)
# @is_subscriber
# async def pay_attempts_bot(message: types.CallbackQuery, state: FSMContext, bot: Bot):
#     url = ""
#     await message.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã—Å—ã–ª–∞–µ–º —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n{url}")


@chat_gpt_router.callback_query(Text(text="next_rofl_recommendation"), any_state)
@chat_gpt_router.callback_query(Text(text="next_objective_recommendation"), any_state)
@is_subscriber
async def user_new_photo(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    if message.data == "next_rofl_recommendation":
        await state.set_state(InputMessage.rofl_ai_recommendation_state)
        await state.update_data(rofl=True)
    else:
        await state.set_state(InputMessage.objective_ai_recommendation_state)
        await state.update_data(rofl=False)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é", callback_data="start_menu"))
    delete_message = await message.message.answer("–û–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –∫–∞—Ä—Ç–∏–Ω–∫—É)", reply_markup=keyboard.as_markup())
    await state.update_data(delete_message_id=delete_message.message_id)
    await message.message.delete()


@chat_gpt_router.message(F.photo, InputMessage.rofl_ai_recommendation_state)
@chat_gpt_router.message(F.photo, InputMessage.objective_ai_recommendation_state)
@is_subscriber
async def get_photo_objective(message: types.Message, state: FSMContext, bot: Bot):
    rofl = await state.get_data()
    rofl, delete_message = rofl.get("rofl"), rofl.get("delete_message_id")
    if delete_message is not None:
        await bot.delete_message(chat_id=message.from_user.id, message_id=delete_message)
    delete_message = await message.answer("–ü—Ä–∏–Ω—è–ª–∏ —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω üé®. –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è≥, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
                                          " –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    await state.clear()
    photo_bytes_io = io.BytesIO()
    await bot.download(message.photo[-1], destination=photo_bytes_io)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é", callback_data="start_menu"))
    if rofl:
        answer_gpt = await RatingChatGpt(photo_bytes_io).assessment(False)
        text_after = ("–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë –±–æ–ª—å—à–µ –º—É–¥—Ä—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É üì∏."
                      " –î–∞–π –Ω–∞—à–µ–º—É Ai –µ—â—ë –æ–¥–∏–Ω —à–∞–Ω—Å —Ä–∞–∑–Ω–µ—Å—Ç–∏ —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω! üòÑ")
        keyboard.row(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="next_rofl_recommendation"))
    else:
        answer_gpt = await RatingChatGpt(photo_bytes_io).assessment(True)
        text_after = ("–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –µ—â–µ –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É üì∏, –∏ –Ω–∞—à–∞ Ai –º–æ–¥–µ–ª—å"
                      " –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ–π –¥–∏–∑–∞–π–Ω –∏–¥–µ–∞–ª—å–Ω—ã–º!")
        keyboard.row(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É",
                                          callback_data="next_objective_recommendation"))
    await delete_message.delete()
    await message.answer(text=answer_gpt)
    await asyncio.sleep(5)
    await message.answer(text_after, reply_markup=keyboard.as_markup())
